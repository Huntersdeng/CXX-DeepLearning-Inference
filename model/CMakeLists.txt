find_package(yaml-cpp)

add_library(yolov8_seg SHARED ${CMAKE_CURRENT_SOURCE_DIR}/yolov8/yolov8_seg.cpp ${CMAKE_CURRENT_SOURCE_DIR}/base/detection_model.cpp)
target_include_directories(yolov8_seg PUBLIC ${INCLUDE_DIRS} ${CMAKE_SOURCE_DIR} ${PROJECT_BINARY_DIR})
if(USE_TENSORRT)
    target_link_libraries(yolov8_seg framework_trt framework_onnx yaml-cpp)
else()
    target_link_libraries(yolov8_seg framework_onnx yaml-cpp)
endif()
target_link_libraries(yolov8_seg ${OpenCV_LIBS})

add_library(yolov8_end2end SHARED ${CMAKE_CURRENT_SOURCE_DIR}/yolov8/yolov8_e2e.cpp ${CMAKE_CURRENT_SOURCE_DIR}/base/detection_model.cpp)
target_include_directories(yolov8_end2end PUBLIC ${INCLUDE_DIRS} ${CMAKE_SOURCE_DIR} ${PROJECT_BINARY_DIR})
if(USE_TENSORRT)
    target_link_libraries(yolov8_end2end framework_trt framework_onnx yaml-cpp)
else()
    target_link_libraries(yolov8_end2end framework_onnx yaml-cpp)
endif()
target_link_libraries(yolov8_end2end ${OpenCV_LIBS})

add_library(yolov8_normal SHARED ${CMAKE_CURRENT_SOURCE_DIR}/yolov8/yolov8.cpp ${CMAKE_CURRENT_SOURCE_DIR}/base/detection_model.cpp)
target_include_directories(yolov8_normal PUBLIC ${INCLUDE_DIRS} ${CMAKE_SOURCE_DIR} ${PROJECT_BINARY_DIR})
if(USE_TENSORRT)
    target_link_libraries(yolov8_normal framework_trt framework_onnx yaml-cpp)
else()
    target_link_libraries(yolov8_normal framework_onnx yaml-cpp)
endif()
target_link_libraries(yolov8_normal ${OpenCV_LIBS})

add_library(ctc SHARED ${CMAKE_CURRENT_SOURCE_DIR}/ocr/ctc.cpp ${CMAKE_CURRENT_SOURCE_DIR}/base/ocr_model.cpp)
target_include_directories(ctc PUBLIC ${INCLUDE_DIRS} ${CMAKE_SOURCE_DIR} ${PROJECT_BINARY_DIR})
if(USE_TENSORRT)
    target_link_libraries(ctc framework_trt framework_onnx yaml-cpp)
else()
    target_link_libraries(ctc framework_onnx yaml-cpp)
endif()
target_link_libraries(ctc ${OpenCV_LIBS})

add_library(attn SHARED ${CMAKE_CURRENT_SOURCE_DIR}/ocr/attention.cpp ${CMAKE_CURRENT_SOURCE_DIR}/base/ocr_model.cpp)
target_include_directories(attn PUBLIC ${INCLUDE_DIRS} ${CMAKE_SOURCE_DIR} ${PROJECT_BINARY_DIR})
if(USE_TENSORRT)
    target_link_libraries(attn framework_trt framework_onnx yaml-cpp)
else()
    target_link_libraries(attn framework_onnx yaml-cpp)
endif()
target_link_libraries(attn ${OpenCV_LIBS})

add_library(dbnet SHARED ${CMAKE_CURRENT_SOURCE_DIR}/ocr/dbnet.cpp ${CMAKE_CURRENT_SOURCE_DIR}/base/detection_model.cpp)
target_include_directories(dbnet PUBLIC ${INCLUDE_DIRS} ${CMAKE_SOURCE_DIR} ${PROJECT_BINARY_DIR})
if(USE_TENSORRT)
    target_link_libraries(dbnet framework_trt framework_onnx yaml-cpp)
else()
    target_link_libraries(dbnet framework_onnx yaml-cpp)
endif()
target_link_libraries(dbnet ${OpenCV_LIBS} ${Clipper_LIBS})

add_library(sam SHARED ${CMAKE_CURRENT_SOURCE_DIR}/sam/image_encoder.cpp ${CMAKE_CURRENT_SOURCE_DIR}/sam/mask_decoder.cpp ${CMAKE_CURRENT_SOURCE_DIR}/sam/sam.cpp)
target_include_directories(sam PUBLIC ${INCLUDE_DIRS} ${CMAKE_SOURCE_DIR} ${PROJECT_BINARY_DIR})
if(USE_TENSORRT)
    target_link_libraries(sam framework_trt framework_onnx yaml-cpp)
else()
    target_link_libraries(sam framework_onnx yaml-cpp)
endif()
target_link_libraries(sam ${OpenCV_LIBS})